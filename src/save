int mainq() {

    int i, j;
    char *value;
    size_t valueSize;
    cl_uint platformCount;
    cl_platform_id *platforms;
    cl_uint deviceCount;
    cl_device_id *devices;
    cl_uint maxComputeUnits;

    // get all platforms
    clGetPlatformIDs(0, NULL, &platformCount);
    platforms = (cl_platform_id *) malloc(sizeof(cl_platform_id) * platformCount);
    clGetPlatformIDs(platformCount, platforms, NULL);

    for (i = 0; i < platformCount; i++) {

        // get all devices
        clGetDeviceIDs(platforms[i], CL_DEVICE_TYPE_ALL, 0, NULL, &deviceCount);
        devices = (cl_device_id *) malloc(sizeof(cl_device_id) * deviceCount);
        clGetDeviceIDs(platforms[i], CL_DEVICE_TYPE_ALL, deviceCount, devices, NULL);

        // for each device print critical attributes
        for (j = 0; j < deviceCount; j++) {

            // print device name
            clGetDeviceInfo(devices[j], CL_DEVICE_NAME, 0, NULL, &valueSize);
            value = (char *) malloc(valueSize);
            clGetDeviceInfo(devices[j], CL_DEVICE_NAME, valueSize, value, NULL);
            printf("%d. Device: %s\n", j + 1, value);
            free(value);

            // print hardware device version
            clGetDeviceInfo(devices[j], CL_DEVICE_VERSION, 0, NULL, &valueSize);
            value = (char *) malloc(valueSize);
            clGetDeviceInfo(devices[j], CL_DEVICE_VERSION, valueSize, value, NULL);
            printf(" %d.%d Hardware version: %s\n", j + 1, 1, value);
            free(value);

            // print software driver version
            clGetDeviceInfo(devices[j], CL_DRIVER_VERSION, 0, NULL, &valueSize);
            value = (char *) malloc(valueSize);
            clGetDeviceInfo(devices[j], CL_DRIVER_VERSION, valueSize, value, NULL);
            printf(" %d.%d Software version: %s\n", j + 1, 2, value);
            free(value);

            // print c version supported by compiler for device
            clGetDeviceInfo(devices[j], CL_DEVICE_OPENCL_C_VERSION, 0, NULL, &valueSize);
            value = (char *) malloc(valueSize);
            clGetDeviceInfo(devices[j], CL_DEVICE_OPENCL_C_VERSION, valueSize, value, NULL);
            printf(" %d.%d OpenCL C version: %s\n", j + 1, 3, value);
            free(value);

            // print parallel compute units
            clGetDeviceInfo(devices[j], CL_DEVICE_MAX_COMPUTE_UNITS,
                            sizeof(maxComputeUnits), &maxComputeUnits, NULL);
            printf(" %d.%d Parallel compute units: %d\n", j + 1, 4, maxComputeUnits);

        }

        free(devices);

    }

    free(platforms);
    return 0;

}





//#include <GL/glut.h>
//#include <stdlib.h>
//#include <CL/cl.h>
//#include <stdio.h>
//
//void display(void)
//{
//
//
//    glColor3f(1, 1, 1);
//    glPointSize(3);
//    glBegin(GL_POINTS);
//    int x, y;
//    x = rand()%320 ;
//    y = rand()%240;
//
//    glVertex2i (x,y);
//    glEnd();
//
//    glFlush();
//}
//
//
//int main(int argc,char** argv)
//{
//    int err;
//    cl_platform_id *ids = malloc(sizeof(cl_platform_id) * 10);
//    cl_uint numPlatforms = 0;
//    err = clGetPlatformIDs(1, ids, &numPlatforms);
//    printf("%d\n", ids[0]);
//
////    clGetPlatformInfo(1)
//
////    printf("%d\n", err);
////
////    glutInit(&argc,argv);
////    glutInitDisplayMode(GLUT_SINGLE);
////    glutInitWindowSize(1920, 1080);
////    glutCreateWindow("Randomly generated points");
////    glClearColor(0,0,0,0);
////    glClear(GL_COLOR_BUFFER_BIT);
////    glMatrixMode(GL_PROJECTION);
////    glLoadIdentity();
////    gluOrtho2D(0.0, 640.0, 0.0, 480.0);
////
////    display();
////    display();
//////    glutDisplayFunc(display);
//////    glutIdleFunc(idle);
////    glutMainLoop();
//}
